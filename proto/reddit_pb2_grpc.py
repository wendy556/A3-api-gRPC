# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reddit_pb2 as reddit__pb2


class RedditServiceStub(object):
    """Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/reddit.RedditService/CreatePost',
                request_serializer=reddit__pb2.CreateRequest.SerializeToString,
                response_deserializer=reddit__pb2.CreatePostResponse.FromString,
                )
        self.VotePost = channel.unary_unary(
                '/reddit.RedditService/VotePost',
                request_serializer=reddit__pb2.VotePostRequest.SerializeToString,
                response_deserializer=reddit__pb2.VotePostResponse.FromString,
                )
        self.RetrievePostContent = channel.unary_unary(
                '/reddit.RedditService/RetrievePostContent',
                request_serializer=reddit__pb2.RetrievePostContentRequest.SerializeToString,
                response_deserializer=reddit__pb2.RetrievePostContentResponse.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/reddit.RedditService/CreateComment',
                request_serializer=reddit__pb2.CreateCommentRequest.SerializeToString,
                response_deserializer=reddit__pb2.CreateCommentResponse.FromString,
                )
        self.VoteComment = channel.unary_unary(
                '/reddit.RedditService/VoteComment',
                request_serializer=reddit__pb2.VoteCommentRequest.SerializeToString,
                response_deserializer=reddit__pb2.VoteCommentResponse.FromString,
                )
        self.GetTopComments = channel.unary_unary(
                '/reddit.RedditService/GetTopComments',
                request_serializer=reddit__pb2.TopCommentsRequest.SerializeToString,
                response_deserializer=reddit__pb2.TopCommentsResponse.FromString,
                )
        self.ExpandCommentBranch = channel.unary_unary(
                '/reddit.RedditService/ExpandCommentBranch',
                request_serializer=reddit__pb2.ExpandCommentBranchRequest.SerializeToString,
                response_deserializer=reddit__pb2.ExpandCommentBranchResponse.FromString,
                )
        self.MonitorUpdates = channel.stream_stream(
                '/reddit.RedditService/MonitorUpdates',
                request_serializer=reddit__pb2.MonitorUpdatesRequest.SerializeToString,
                response_deserializer=reddit__pb2.MonitorUpdatesResponse.FromString,
                )
        self.CreateSubreddit = channel.unary_unary(
                '/reddit.RedditService/CreateSubreddit',
                request_serializer=reddit__pb2.Subreddit.SerializeToString,
                response_deserializer=reddit__pb2.Subreddit.FromString,
                )
        self.GetSubredditInfo = channel.unary_unary(
                '/reddit.RedditService/GetSubredditInfo',
                request_serializer=reddit__pb2.SubredditRequest.SerializeToString,
                response_deserializer=reddit__pb2.Subreddit.FromString,
                )


class RedditServiceServicer(object):
    """Service definition
    """

    def CreatePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VotePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrievePostContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandCommentBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorUpdates(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSubreddit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubredditInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=reddit__pb2.CreateRequest.FromString,
                    response_serializer=reddit__pb2.CreatePostResponse.SerializeToString,
            ),
            'VotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.VotePost,
                    request_deserializer=reddit__pb2.VotePostRequest.FromString,
                    response_serializer=reddit__pb2.VotePostResponse.SerializeToString,
            ),
            'RetrievePostContent': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrievePostContent,
                    request_deserializer=reddit__pb2.RetrievePostContentRequest.FromString,
                    response_serializer=reddit__pb2.RetrievePostContentResponse.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=reddit__pb2.CreateCommentRequest.FromString,
                    response_serializer=reddit__pb2.CreateCommentResponse.SerializeToString,
            ),
            'VoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteComment,
                    request_deserializer=reddit__pb2.VoteCommentRequest.FromString,
                    response_serializer=reddit__pb2.VoteCommentResponse.SerializeToString,
            ),
            'GetTopComments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopComments,
                    request_deserializer=reddit__pb2.TopCommentsRequest.FromString,
                    response_serializer=reddit__pb2.TopCommentsResponse.SerializeToString,
            ),
            'ExpandCommentBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpandCommentBranch,
                    request_deserializer=reddit__pb2.ExpandCommentBranchRequest.FromString,
                    response_serializer=reddit__pb2.ExpandCommentBranchResponse.SerializeToString,
            ),
            'MonitorUpdates': grpc.stream_stream_rpc_method_handler(
                    servicer.MonitorUpdates,
                    request_deserializer=reddit__pb2.MonitorUpdatesRequest.FromString,
                    response_serializer=reddit__pb2.MonitorUpdatesResponse.SerializeToString,
            ),
            'CreateSubreddit': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSubreddit,
                    request_deserializer=reddit__pb2.Subreddit.FromString,
                    response_serializer=reddit__pb2.Subreddit.SerializeToString,
            ),
            'GetSubredditInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubredditInfo,
                    request_deserializer=reddit__pb2.SubredditRequest.FromString,
                    response_serializer=reddit__pb2.Subreddit.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reddit.RedditService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RedditService(object):
    """Service definition
    """

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/CreatePost',
            reddit__pb2.CreateRequest.SerializeToString,
            reddit__pb2.CreatePostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/VotePost',
            reddit__pb2.VotePostRequest.SerializeToString,
            reddit__pb2.VotePostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrievePostContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/RetrievePostContent',
            reddit__pb2.RetrievePostContentRequest.SerializeToString,
            reddit__pb2.RetrievePostContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/CreateComment',
            reddit__pb2.CreateCommentRequest.SerializeToString,
            reddit__pb2.CreateCommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/VoteComment',
            reddit__pb2.VoteCommentRequest.SerializeToString,
            reddit__pb2.VoteCommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/GetTopComments',
            reddit__pb2.TopCommentsRequest.SerializeToString,
            reddit__pb2.TopCommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandCommentBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/ExpandCommentBranch',
            reddit__pb2.ExpandCommentBranchRequest.SerializeToString,
            reddit__pb2.ExpandCommentBranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorUpdates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/reddit.RedditService/MonitorUpdates',
            reddit__pb2.MonitorUpdatesRequest.SerializeToString,
            reddit__pb2.MonitorUpdatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSubreddit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/CreateSubreddit',
            reddit__pb2.Subreddit.SerializeToString,
            reddit__pb2.Subreddit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubredditInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/GetSubredditInfo',
            reddit__pb2.SubredditRequest.SerializeToString,
            reddit__pb2.Subreddit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
